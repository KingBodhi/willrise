datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("EDITOR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id          String   @id @default(cuid())
  title       String
  handle      String   @unique
  description String?
  heroImage   String?
  status      String   @default("ACTIVE")
  products    CollectionProduct[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  title       String
  handle      String   @unique
  description String
  status      String   @default("ACTIVE")
  metadata    String?  // JSON string
  images      ProductImage[]
  variants    Variant[]
  collections CollectionProduct[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  alt       String?
  sort      Int      @default(0)
}

model Variant {
  id         String        @id @default(cuid())
  product    Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  sku        String        @unique
  price      Int
  compareAt  Int?
  color      String?
  size       String?
  weightG    Int?
  dims       String?
  inventory  InventoryLevel?
  isDefault  Boolean       @default(false)
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model InventoryLevel {
  id        String  @id @default(cuid())
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String  @unique
  location  String  @default("default")
  quantity  Int     @default(0)
  reserved  Int     @default(0)
}

model CollectionProduct {
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  @@id([productId, collectionId])
}

model Cart {
  id         String     @id @default(cuid())
  email      String?
  attributes String?    // JSON string
  items      CartItem[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CartItem {
  id        String  @id @default(cuid())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String
  qty       Int     @default(1)
  price     Int
  metadata  String?  // JSON string
}

model Order {
  id        String    @id @default(cuid())
  email     String
  status    String    @default("PENDING")
  total     Int       @default(0)
  tax       Int       @default(0)
  shipping  Int       @default(0)
  paymentId String?
  items     OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String
  qty       Int
  price     Int
  title     String
  sku       String
}
